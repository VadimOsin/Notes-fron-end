{"ast":null,"code":"import { ADD_POST, PUT_POST, POST_POST, GET_POST, DELETE_POST } from '../actions/actionsForPost';\nexport function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POST:\n      return [...action.payload];\n\n    case POST_POST:\n      return {\n        value: action.value_1\n      };\n\n    case PUT_POST:\n      {\n        const newList = state.map(item => {\n          if (item.id === action.payload.post.id) {\n            const updatedItem = { ...item,\n              id: action.payload.post.id,\n              title: action.payload.post.title,\n              content: action.payload.post.content\n            };\n            return updatedItem;\n          }\n\n          return item;\n        });\n        return newList;\n      }\n\n    case DELETE_POST:\n      return state.filter(post => action.payload.id !== post.id);\n\n    case ADD_POST:\n      return [...state, {\n        id: action.payload.id,\n        title: action.payload.title,\n        content: action.payload.content\n      }];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_POST","PUT_POST","POST_POST","GET_POST","DELETE_POST","reducer","state","action","type","payload","value","value_1","newList","map","item","id","post","updatedItem","title","content","filter"],"sources":["D:/PET Project/Memo/memo/src/store/reducers/postReducer.js"],"sourcesContent":["import {ADD_POST, PUT_POST, POST_POST, GET_POST, DELETE_POST} from '../actions/actionsForPost'\r\n\r\n\r\nexport function reducer(state = [], action) {\r\n    switch (action.type) {\r\n        case GET_POST:\r\n            return [...action.payload];\r\n        case POST_POST:\r\n            return {value: action.value_1};\r\n        case PUT_POST: {\r\n            const newList = state.map((item) => {\r\n                if (item.id === action.payload.post.id) {\r\n                    const updatedItem = {\r\n                        ...item,\r\n                        id: action.payload.post.id,\r\n                        title: action.payload.post.title,\r\n                        content: action.payload.post.content\r\n                    };\r\n                    return updatedItem;\r\n                }\r\n\r\n                return item;\r\n            })\r\n            return newList;\r\n        }\r\n        case DELETE_POST:\r\n            return state.filter(post => action.payload.id !== post.id);\r\n        case ADD_POST:\r\n            return [...state, {\r\n                id: action.payload.id,\r\n                title: action.payload.title,\r\n                content: action.payload.content,\r\n            }];\r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,WAAjD,QAAmE,2BAAnE;AAGA,OAAO,SAASC,OAAT,GAAqC;EAAA,IAApBC,KAAoB,uEAAZ,EAAY;EAAA,IAARC,MAAQ;;EACxC,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKL,QAAL;MACI,OAAO,CAAC,GAAGI,MAAM,CAACE,OAAX,CAAP;;IACJ,KAAKP,SAAL;MACI,OAAO;QAACQ,KAAK,EAAEH,MAAM,CAACI;MAAf,CAAP;;IACJ,KAAKV,QAAL;MAAe;QACX,MAAMW,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAWC,IAAD,IAAU;UAChC,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBD,EAApC,EAAwC;YACpC,MAAME,WAAW,GAAG,EAChB,GAAGH,IADa;cAEhBC,EAAE,EAAER,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBD,EAFR;cAGhBG,KAAK,EAAEX,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBE,KAHX;cAIhBC,OAAO,EAAEZ,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBG;YAJb,CAApB;YAMA,OAAOF,WAAP;UACH;;UAED,OAAOH,IAAP;QACH,CAZe,CAAhB;QAaA,OAAOF,OAAP;MACH;;IACD,KAAKR,WAAL;MACI,OAAOE,KAAK,CAACc,MAAN,CAAaJ,IAAI,IAAIT,MAAM,CAACE,OAAP,CAAeM,EAAf,KAAsBC,IAAI,CAACD,EAAhD,CAAP;;IACJ,KAAKf,QAAL;MACI,OAAO,CAAC,GAAGM,KAAJ,EAAW;QACdS,EAAE,EAAER,MAAM,CAACE,OAAP,CAAeM,EADL;QAEdG,KAAK,EAAEX,MAAM,CAACE,OAAP,CAAeS,KAFR;QAGdC,OAAO,EAAEZ,MAAM,CAACE,OAAP,CAAeU;MAHV,CAAX,CAAP;;IAKJ;MACI,OAAOb,KAAP;EA9BR;AAgCH"},"metadata":{},"sourceType":"module"}